# -*- coding: utf-8 -*-
"""Copy of PROJECT INTENSHIP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R7-LcfLUeaW5Cxmu2TAwAI8QQPwcSR_d
"""

!pip install yfinance pandas matplotlib scikit-learn

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
print("hello welcome to stock price visualizer \n")
ticker = input("Enter Stock Ticker Symbol (e.g., AAPL, INFY): ").upper()
data = yf.download(ticker, start="2023-01-01", end="2025-05-30")

if data.empty:
    print(f"Error: Could not download data for ticker symbol '{ticker}'. Please check the ticker symbol and try again.")
else:
    plt.figure(figsize=(12, 6))
    plt.plot(data['Close'], label='Closing Price', color='blue')
    plt.title(f"{ticker} Closing Price (2023-2024)")
    plt.xlabel("Date")
    plt.ylabel("Price")
    plt.grid(True)
    plt.legend()
    plt.show()

    data['MA50'] = data['Close'].rolling(window=50).mean()
    data['MA200'] = data['Close'].rolling(window=200).mean()


    plt.figure(figsize=(12, 6))
    plt.plot(data['Close'], label='Closing Price', color='blue')
    plt.plot(data['MA50'], label='50-Day MA', color='green')
    plt.plot(data['MA200'], label='200-Day MA', color='red')
    plt.title(f"{ticker} Price with Moving Averages")
    plt.legend()
    plt.grid(True)
    plt.show()


    data['Return'] = data['Close'].pct_change()
    data['Target'] = (data['Return'].shift(-1) > 0).astype(int)  # 1 if price goes up next day

    for i in range(1, 6):
        data[f'Return_lag_{i}'] = data['Return'].shift(i)

    data = data.dropna()

    if data.empty:
        print("Error: Data is empty after dropping missing values. Cannot proceed with prediction.")
    else:
        X = data[[f'Return_lag_{i}' for i in range(1, 6)]]
        y = data['Target']


        X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

        model = LogisticRegression()
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print(f"\n Prediction Accuracy: {accuracy * 100:.2f}%")

        latest_data = X.tail(1)
        next_day_prediction = model.predict(latest_data)[0]
        direction = "UP" if next_day_prediction == 1 else "DOWN"
        print(f"\nðŸ”® Predicted movement for next day: {direction}")

import yfinance as yf
# Try getting stock info
stock = yf.Ticker("TCS.NS")  # Example: Tata Consultancy Services
print(stock.info['longName'])



